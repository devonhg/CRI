<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cri_body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_sentient</parentName>
  <maskName>spr_player_test</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_arm = spr_cri_arm;
s_head = spr_cri_head; 

phy_angular_damping = 2; 

rotation_speed = 1; 

player_angle = 0; 
angle_adjst = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States

mdif = sign(angle_difference( point_direction(x,y,mouse_x, mouse_y), scr_convert_angle(image_angle - 90) ) );


//obtain instance id of currently grabbed object. 
if con_control.key_grab or con_control.key_hold{
    nearGrab = instance_position(mouse_x,mouse_y, par_grabbable); 
    if nearGrab != -4{
        obj_holding = nearGrab;
    }
}else if !con_control.key_grab and !con_control.key_hold{
    obj_holding = -4;
} 

state_m_left = con_control.key_left;
state_m_right = con_control.key_right;
state_m_up = con_control.key_up;
state_m_down = con_control.key_down;

state_a_holding = obj_holding.holding;
state_look_dir = mdif;//sign(mouse_x - x);

state_m_dir = -state_m_left + state_m_right;


scr_track("Image Angle", scr_convert_angle(image_angle)); 
scr_track("Angle Difference", mdif);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item Collecting 
if obj_holding.holding 
and (con_control.key_hold /*and con_control.key_grab*/)
and distance_to_point(nearGrab.x, nearGrab.y) &lt; 50{
    nearGrab.isCarried = true; 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotation/Angle handling

var chkx, chky,
    can_rotate,
    chka, chkLeft,
    chkRight; 
    
    if mdif = 1 chka = 180;
    else chka = 0; 

    chkx = lengthdir_x( sprite_width * 1.5, image_angle + chka );
    chky = lengthdir_y( sprite_width * 1.5, image_angle + chka );

    chkLeft = position_meeting( x + chkx, y + chky,obj_wall);
    
    if mdif = 1 chka = 0;
    else chka = 180; 

    chkx = lengthdir_x( sprite_width * 1.5, image_angle + chka );
    chky = lengthdir_y( sprite_width * 1.5, image_angle + chka );

    chkRight = position_meeting( x + chkx, y + chky,obj_wall);

scr_track( "player_angle" , string( image_angle ) );

if ( instance_exists(con_level) ){


    
    if con_control.key_rotate_left and !chkLeft{
        //con_level.world_angle -= 1;
        
        //phy_rotation -= 2; 
        
        //phy_angular_velocity = -rotation_speed;
        
        rotation_base += -rotation_speed;
        
    }
    
    if con_control.key_rotate_right and !chkRight{
        //phy_rotation += 2;

        //phy_angular_velocity = rotation_speed; 
        
        //con_level.world_angle += 1; 
        
        rotation_base += rotation_speed;
    }
    
    view_angle = rotation_base; 
    
}

//phy_rotation = player_angle + angle_adjst; 

//Arm Angles
    if state_look_dir = 1{
        if state_a_holding arm_back_angle_set = 30
        else arm_back_angle_set = 0;    
    }else{
        if state_a_holding arm_back_angle_set = 330
        else arm_back_angle_set = 0;  
    }
   



if (!state_m_left and !state_m_right){
    //phy_rotation = player_angle;
}

var ang = point_direction(phy_position_x, phy_position_y-20, mouse_x, mouse_y) + phy_rotation;
var dif = angle_difference(ang, head_angle);
head_angle = scr_convert_angle(head_angle)
head_angle += median(-5, dif, 5); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,-16</point>
    <point>16,12</point>
    <point>16,28</point>
    <point>12,40</point>
    <point>4,40</point>
    <point>0,28</point>
    <point>0,12</point>
    <point>4,-16</point>
  </PhysicsShapePoints>
</object>
