<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Core
buttonType = 0;//The type of button, 0 = toggle, 1 = Normal 
buttonName = "NoName";//Button Name
state = 0;// The "State" of the Button
sprite = 0;// The Primary Sprite
buttonDown = 0;// The button down sprite
font = "";//The Font to use
Activate = false;//Calling this to "true" is the same as clicking on the button
clickable = true;//Toggle this to false and button cannot be pressed 
fontColor = c_black;//Set teh Font Color
showName = true;//Whether or not to show name of button

selected = false;//Similar to "Hover", good for controller-based menus

image_speed = 0;

//Delayed Actions
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Post-Create

if buttonDown = 0 buttonDown = sprite; 
sprite_index = sprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Core
if clickable{
    CLICK = (position_meeting(mouse_x,mouse_y,id) and mouse_check_button_pressed(mb_left)) or Activate = true
}else{ CLICK = false; }

if position_meeting(mouse_x,mouse_y,id) or selected = true{  

    if image_number &gt; 1{//If base sprite has a hover state
        image_index = 1; 
    } 
        
}else{ image_index = 0; }

if state = 0 sprite_index = sprite;
else sprite_index = buttonDown;


switch(buttonType){
    
    case 0://Toggle Switch
        if CLICK state = !(state)
    break;
    
    case 1://Push button(on for a step then off)
        state = false
        if CLICK state = true 
    break;
}    


if Activate = true Activate = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Core

if clickable = false draw_set_alpha(.5);
draw_self();
draw_set_font(font);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(fontColor);

if showName = true { draw_text(round(x),round(y-1.2),buttonName); }

draw_set_color(-1);
draw_set_font(-1);
draw_set_valign(-1);
draw_set_halign(-1);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>100,37</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
