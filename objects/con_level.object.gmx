<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declar Variables
screenPlus = 0; 
view_move_x = 0; 
view_move_y = 0; 
view_move_max = 2; 
view_move_speed = .05;

view_repo_timer = 0; 

world_angle = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_player){
    view_object[0] = obj_player;
    view_hborder[0] = view_wview/2;
    view_vborder[0] = view_hview/2.5;
}

///Rotation Control
world_angle = scr_convert_angle(world_angle);

view_angle = world_angle; 


/*
///Camera Behavior

//Get room center
view_xcen = view_xview[0] + (view_wview[0]/2);
view_ycen = view_yview[0] + (view_hview[0]/2);

//Setting control
key_right = con_control.key_right;
key_left = con_control.key_left;
key_up = con_control.key_up;
key_down = con_control.key_down;
key_grab = con_control.key_grab; 

//Test if any keys are pressed
no_key = !key_right and !key_left and !key_up and !key_down and !key_grab;

//Set Movement
view_xview += view_move_x; 
view_yview += view_move_y; 

//Set camera to follow player
if instance_exists(obj_player) and view_object[0] != obj_player{
    view_object[0] = obj_player; 
    view_hborder[0] = view_wview*.20;
    view_vborder[0] = view_hview*.20;
}

//If a key is pressed, move camera towards front of player
if !no_key{
    //Camera Behavior Horizontal
    if key_right{
        view_move_x += view_move_speed;   
    }if key_left{
        view_move_x -= view_move_speed;
    }
    if !key_right and !key_left{ 
        if view_move_x &lt; .5 and view_move_x &gt; -.5{
            view_move_x = 0; 
        }
    
        if view_move_x &gt; 0{
            view_move_x -= view_move_speed
        }else if view_move_x &lt; 0{
            view_move_x += view_move_speed; 
        } 
    }
    //Camera Behavior Vertical
    if key_down{
        view_move_y += view_move_speed;   
    }if key_up{
        view_move_y -= view_move_speed;
    }
    if !key_up and !key_down{ 
        if view_move_y &lt; .5 and view_move_y &gt; -.5{
            view_move_y = 0; 
        }
    
        if view_move_y &gt; 0{
            view_move_y -= view_move_speed
        }else if view_move_y &lt; 0{
            view_move_y += view_move_speed; 
        } 
    }
}
//Otherwise center camera on player. 
else{
    if point_distance(obj_player.x, obj_player.y, view_xcen, view_ycen ) &gt; 12{
        if view_xcen &lt; obj_player.x{
            view_move_x += view_move_speed/5;
        }else{
            view_move_x -= view_move_speed/5; 
        } 
        
        if view_ycen &lt; obj_player.y{
            view_move_y += view_move_speed/5;
        }else{
            view_move_y -= view_move_speed/5; 
        }                   
    }
    
    if abs(view_xcen - obj_player.x) &lt; 12{
        view_move_x = 0;
    }
    if abs(view_ycen - obj_player.y) &lt; 12{
        view_move_y = 0; 
    }   
}

cMaster.test0 = view_move_x;
cMaster.test1 = view_move_y; 

//Speed limiters for movement
if view_move_x &gt; view_move_max view_move_x = view_move_max; 
if view_move_x &lt; view_move_max*-1 view_move_x = view_move_max*-1;

if view_move_y &gt; view_move_max view_move_y = view_move_max; 
if view_move_y &lt; view_move_max*-1 view_move_y = view_move_max*-1;

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
