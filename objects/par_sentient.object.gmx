<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_physics</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README
/*
    The purpose of this parent is it acts as a basis for "entities", or objects that
    are similar to or are the player object. The other sub-processes will be based on this
    object. 
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Variables

/* Rotation Variables */

    rotation_base = phy_rotation; 
    rotation_adjust = 0;

/* Directly Editable Values */

    maxSpeed = 400;

/* Everything Else */
    hoverVariance = 0;//Hover 
    hoverSwitch = false; 
    
    p = 0;
    
    phy_fixed_rotation = true;

/* States */ 
    //Check/Set these variables for movement. For instance
    //Setting state_m_up will make the entity move up. 
    state_m_left = false;//Movement Left
    state_m_right = false;//Movement Right
    state_m_up = false;//Movement Up
    state_m_down = false;//Movement Down
    state_m_dir = 0;
    state_look_dir = 1;
    
    //state_a_holding = false; 
    
    //obj_holding = -4; 
    
    dir_look = image_angle; 
    
    arm_back_angle = 0; 
    arm_front_angle = 0; 
    head_angle = 0; 
    
    arm_back_angle_set = 0;
    arm_front_angle_set = 0;
    
    s_arm = -1;
    s_head = -1; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

state_m_dir = -state_m_left + state_m_right;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Conditions
    //Left
    if state_m_dir = -1{
        //if phy_rotation &gt;= -14{ phy_rotation -= 1; }   
        //physics_apply_force(x,y,-maxSpeed,0);
        var goAng = 180,
            XX = lengthdir_x(maxSpeed, image_angle + goAng ),
            YY = lengthdir_y(maxSpeed, image_angle + goAng );
        
        physics_apply_force(x,y, XX , YY);
    }
    
    //Right
    if state_m_dir = 1{
        //if phy_rotation &lt;= 14{ phy_rotation += 1; }    
        //physics_apply_force(x,y,maxSpeed,0); 
        
        var goAng = 0,
            XX = lengthdir_x(maxSpeed, image_angle + goAng ),
            YY = lengthdir_y(maxSpeed, image_angle + goAng );
        
        physics_apply_force(x,y, XX , YY);
        
    }
    
    //Up
    if state_m_up{
        var goAng = 90,
            XX = lengthdir_x(maxSpeed, image_angle + goAng ),
            YY = lengthdir_y(maxSpeed, image_angle + goAng );
        
        physics_apply_force(x,y, XX , YY);
    
        //physics_apply_force(x,y,0,-maxSpeed);
    }
    
    //Down
    if state_m_down{
    
        var goAng = 270,
            XX = lengthdir_x(maxSpeed, image_angle + goAng ),
            YY = lengthdir_y(maxSpeed, image_angle + goAng );
        
        physics_apply_force(x,y, XX , YY);
    
        //physics_apply_force(x,y,0,maxSpeed);
    }

image_xscale = state_look_dir; 

phy_rotation = rotation_base + rotation_adjust;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hover Code

if !state_m_up and !state_m_down{
    if hoverSwitch = false{
        hoverVariance += 1
        if hoverVariance &gt;= 20{
            hoverSwitch = !hoverSwitch; 
            physics_apply_impulse(x,y, 0, (.5 * phy_mass));
        }
    }if hoverSwitch = true{
        hoverVariance -= 1
        if hoverVariance &lt;= -20{
            hoverSwitch = !hoverSwitch;  
            physics_apply_impulse(x,y, 0, (-.5 * phy_mass));
        }
    }
}

physics_apply_force(x,y, 0, (-15 * phy_mass))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var s_index;//A temp variable to make setting frame convienent; 
var a;//A temp variable for angles
var ap_xx;//Arm Position
var ap_yy;
var ang_di;//Angle Difference; 

if state_a_holding s_index = 0 else s_index = 1

//Draw Back Arm
    if state_look_dir = 1{    
    
        //if state_a_holding arm_back_angle_set = 30
        //else arm_back_angle_set = 0;          
        
        arm_back_angle += scr_rotate_to( arm_back_angle, arm_back_angle_set, 5);
        scr_draw_limb(65, 17, image_angle + arm_back_angle, s_arm, 0, -1, 1);    
    }else{    
        //if state_a_holding arm_back_angle_set = 330
        //else arm_back_angle_set = 0;  
        
        arm_back_angle += scr_rotate_to( arm_back_angle, arm_back_angle_set, 5);
        scr_draw_limb(115, 17, image_angle + arm_back_angle, s_arm, 0,1,1);
    }

//Draw Body
    draw_self();
    image_index = s_index; 


//Draw Front Arm
    if state_look_dir = 1{   
        arm_front_angle += scr_rotate_to(arm_front_angle, arm_front_angle_set, 5);
        scr_draw_limb(115, 17, image_angle + arm_front_angle, s_arm, 0, 1, 1);    
    }else{
    
        arm_front_angle += scr_rotate_to(arm_front_angle, arm_front_angle_set, 5);
        scr_draw_limb(65, 17, image_angle + arm_front_angle, s_arm, 0, -1, 1);
    }
    
//Head
    //var ang = point_direction(phy_position_x, phy_position_y-20, mouse_x, mouse_y);
    //var dif = angle_difference(ang, head_angle);
    
    //head_angle = scr_convert_angle(head_angle)
    //head_angle += median(-5, dif, 5); 

    if state_look_dir = 1{   
        head_angle = angle_clamp(head_angle, 0, 30);  
        scr_draw_limb(90, 20, image_angle + head_angle, s_head, s_index,1,1);
    }else{ 
        head_angle = angle_clamp(head_angle, 180, 30);    
        scr_draw_limb(90, 20, image_angle + head_angle, s_head, s_index,1,-1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
