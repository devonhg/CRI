<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
cannon[0,0] = instance_create(x,y,can_can); //The cannon to create
cannon[0,1] = 10; //Cannons X relative to ship
cannon[0,2] = 10; //Cannons Y relative to ship

cannon[1,0] = instance_create(x,y,can_can); 
cannon[1,1] = -10;
cannon[1,2] = -10;
*/

cannon[0] = instance_create(x,y,can_can); //The cannon to create

cannon[1] = instance_create(x,y,can_can); //The cannon to create
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
for(i = 0; i &lt; array_height_2d(cannon); i++){
    cannon[i,0].x = (x + lengthdir_x(cannon[i,1], image_angle));
    cannon[i,0].y = (y + lengthdir_y(cannon[i,2], image_angle));
    cannon[i,0].direction = point_direction(cannon[0].x, cannon[0].y, mouse_x, mouse_y);
}*/

cannon[0].x = (x + lengthdir_x(10, image_angle));
cannon[0].y = (y + lengthdir_y(10, image_angle));
cannon[0].direction = point_direction(cannon[0].x, cannon[0].y, mouse_x, mouse_y);

cannon[1].x = (x + lengthdir_x(-10, image_angle));
cannon[1].y = (y + lengthdir_y(-10, image_angle));
cannon[1].direction = point_direction(cannon[0].x, cannon[0].y, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction; 

if keyboard_check(vk_left){
    direction += 5;
} 

if keyboard_check(vk_right){
    direction -= 5;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
